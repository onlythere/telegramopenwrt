name: Build and Release Telegram OpenWrt Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'Версия OpenWrt или "snapshots"'
        required: true
        default: 'v24.10.1'
      target_architecture:
        description: 'Target OpenWrt'
        required: false
        default: 'mediatek/filogic'
      create_release:
        description: 'Создать релиз?'
        type: boolean
        default: false

jobs:
  build_package:
    name: Build for OpenWrt ${{ github.event.inputs.openwrt_version || 'v24.10.1' }} (${{ github.event.inputs.target_architecture || 'mediatek/filogic' }})
    runs-on: ubuntu-22.04

    env:
      PACKAGE_NAME: telegramopenwrt
      OPENWRT_VERSION: ${{ github.event.inputs.openwrt_version || 'v24.10.1' }}
      TARGET_ARCH_INPUT: ${{ github.event.inputs.target_architecture || 'mediatek/filogic' }}

    outputs:
      package_files: ${{ steps.find_packages.outputs.files }}
      package_version: ${{ steps.extract_version.outputs.version }}

    steps:
      - name: Checkout telegram-openwrt package repository
        uses: actions/checkout@v4

      - name: Install OpenWrt build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev \
            libssl-dev python3 python3-setuptools python3-dev rsync \
            unzip zlib1g-dev file wget subversion ca-certificates \
            python3-yaml python3-pip libpython3-dev time \
            libelf-dev libfuse-dev

      - name: Setup OpenWrt build environment
        run: |
          echo "Используем OpenWrt версию: ${OPENWRT_VERSION}"
          
          # Определяем архитектуру для SDK
          if [[ "${TARGET_ARCH_INPUT}" == "mediatek/filogic" ]]; then
            SDK_ARCH="mediatek-filogic"
            SDK_TARGET="aarch64_cortex-a53"
          elif [[ "${TARGET_ARCH_INPUT}" == "x86/64" ]]; then
            SDK_ARCH="x86-64"
            SDK_TARGET="x86_64"
          else
            SDK_ARCH="mediatek-filogic"
            SDK_TARGET="aarch64_cortex-a53"
          fi
          
          # Скачиваем готовый SDK вместо компиляции с нуля
          if [[ "${OPENWRT_VERSION}" == "snapshots" ]]; then
            SDK_URL="https://downloads.openwrt.org/snapshots/targets/${TARGET_ARCH_INPUT}/openwrt-sdk-${SDK_ARCH}_gcc-13.3.0_musl.Linux-x86_64.tar.xz"
          else
            # Для релизных версий
            VERSION_NUM=${OPENWRT_VERSION#v}
            SDK_URL="https://downloads.openwrt.org/releases/${VERSION_NUM}/targets/${TARGET_ARCH_INPUT}/openwrt-sdk-${VERSION_NUM}-${SDK_ARCH}_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
          fi
          
          echo "Скачиваем SDK: $SDK_URL"
          wget -O openwrt-sdk.tar.xz "$SDK_URL" || {
            echo "Не удалось скачать SDK, пробуем альтернативный способ..."
            # Fallback к исходному коду для пакетов
            git clone https://github.com/openwrt/openwrt.git -b ${OPENWRT_VERSION} --depth 1 openwrt_sdk
            cd openwrt_sdk
            
            # Простая конфигурация без полной сборки toolchain
            make menuconfig TOPDIR=. CONFIG_AUTOCONFIG=y CONFIG_AUTOREMOVE=y
            exit 0
          }
          
          # Распаковываем SDK
          tar -xf openwrt-sdk.tar.xz
          mv openwrt-sdk-* openwrt_sdk
          cd openwrt_sdk

          # Обновляем feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          echo "Копируем код пакета ${PACKAGE_NAME}..."
          mkdir -p package/${PACKAGE_NAME}
          
          # Используем rsync для копирования с исключениями
          if rsync -av --exclude='openwrt_sdk' --exclude='.git' --exclude='.github' \
            ${GITHUB_WORKSPACE}/ package/${PACKAGE_NAME}/; then
            echo "✅ Файлы успешно скопированы"
          else
            echo "❌ Ошибка копирования файлов"
            exit 1
          fi
          
          echo "Содержимое скопировано в package/${PACKAGE_NAME}:"
          ls -lA package/${PACKAGE_NAME}
          
          # Проверяем наличие Makefile
          if [[ -f "package/${PACKAGE_NAME}/Makefile" ]]; then
            echo "✅ Makefile найден"
          else
            echo "❌ Makefile не найден в пакете!"
            exit 1
          fi

          echo "" > .config
          
          # Простая конфигурация для SDK
          echo "CONFIG_DEVEL=y" >> .config
          echo "CONFIG_TOOLCHAINOPTS=y" >> .config
          echo "CONFIG_PACKAGE_${PACKAGE_NAME//-/_}=m" >> .config
          
          # Зависимости
          echo "CONFIG_PACKAGE_curl=y" >> .config
          echo "CONFIG_PACKAGE_ca_certificates=y" >> .config
          
          make defconfig V=s

      - name: Compile the package
        id: compile_step
        run: |
          cd openwrt_sdk
          
          # Проверяем, есть ли готовый toolchain
          if [[ -d "staging_dir/toolchain-"* ]]; then
            echo "✅ Используем готовый SDK"
            if make package/${PACKAGE_NAME}/compile V=s -j$(nproc); then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "⚠️ SDK не найден, пробуем минимальную сборку"
            # Минимальная сборка только пакета без toolchain
            if make package/${PACKAGE_NAME}/prepare V=s && \
               make package/${PACKAGE_NAME}/compile V=s -j1; then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "❌ Сборка не удалась"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Find package files
        id: find_packages
        if: steps.compile_step.outputs.status == 'success'
        run: |
          cd openwrt_sdk
          files=$(find bin/packages/ -name "${PACKAGE_NAME}*.ipk" -o -name "${PACKAGE_NAME}*.apk" | tr '\n' ' ')
          echo "files=$files" >> $GITHUB_OUTPUT
          echo "Найденные пакеты: $files"

      - name: Extract version from package
        id: extract_version
        if: steps.compile_step.outputs.status == 'success'
        run: |
          cd openwrt_sdk
          pkg_file=$(find bin/packages/ -name "${PACKAGE_NAME}*.ipk" -o -name "${PACKAGE_NAME}*.apk" | head -1)
          if [[ -n "$pkg_file" ]]; then
            version=$(basename "$pkg_file" | sed -n 's/.*_\([0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\)_.*/\1/p')
            if [[ -z "$version" ]]; then
              version="1.0.0-1"
            fi
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "Версия пакета: $version"
          fi

      - name: Upload package artifacts
        if: steps.compile_step.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-package-${{ env.OPENWRT_VERSION }}-${{ env.TARGET_ARCH_INPUT }}
          path: |
            openwrt_sdk/bin/packages/*/*/${{ env.PACKAGE_NAME }}*.ipk
            openwrt_sdk/bin/packages/*/*/*/${{ env.PACKAGE_NAME }}*.ipk
            openwrt_sdk/bin/packages/*/*/${{ env.PACKAGE_NAME }}*.apk
            openwrt_sdk/bin/packages/*/*/*/${{ env.PACKAGE_NAME }}*.apk
          if-no-files-found: error

  create_release:
    name: Create Release
    needs: build_package
    runs-on: ubuntu-22.04
    if: |
      needs.build_package.result == 'success' && (
        startsWith(github.ref, 'refs/tags/v') ||
        github.event.inputs.create_release == 'true'
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: telegramopenwrt-package-*
          merge-multiple: true
          path: ./packages

      - name: Create package index
        run: |
          cd packages
          
          # Создаем индекс пакетов для opkg
          echo "Package: telegramopenwrt" > Packages
          echo "Version: ${{ needs.build_package.outputs.package_version }}" >> Packages
          echo "Depends: curl, ca-certificates" >> Packages
          echo "Section: utils" >> Packages
          echo "Architecture: aarch64_cortex-a53" >> Packages
          echo "Installed-Size: 2048" >> Packages
          echo "Filename: $(ls *.ipk *.apk 2>/dev/null | head -1)" >> Packages
          echo "Size: $(stat -c%s $(ls *.ipk *.apk 2>/dev/null | head -1) 2>/dev/null || echo 2048)" >> Packages
          echo "SHA256sum: $(sha256sum $(ls *.ipk *.apk 2>/dev/null | head -1) | cut -d' ' -f1)" >> Packages
          echo "Description: Telegram Scripts for OpenWrt - Manage and get information on OpenWrt routers via Telegram bot" >> Packages
          echo "" >> Packages
          
          # Сжимаем индекс
          gzip -c Packages > Packages.gz
          
          # Создаем простой HTML индекс
          echo "<html><head><title>OpenWrt Packages Repository</title></head><body>" > index.html
          echo "<h1>Telegram OpenWrt Scripts Repository</h1>" >> index.html
          echo "<p>A set of scripts with a plugins API written in bash to manage and get information on OpenWrt routers via Telegram bot.</p>" >> index.html
          echo "<h2>Available Packages:</h2><ul>" >> index.html
          for file in *.ipk *.apk; do
            if [[ -f "$file" ]]; then
              echo "<li><a href=\"$file\">$file</a></li>" >> index.html
            fi
          done
          echo "</ul>" >> index.html
          echo "<h2>Installation:</h2>" >> index.html
          echo "<pre>echo 'src/gz telegramopenwrt https://github.com/onlythere/telegramopenwrt/releases/latest/download' >> /etc/opkg/customfeeds.conf" >> index.html
          echo "opkg update" >> index.html
          echo "opkg install telegramopenwrt</pre>" >> index.html
          echo "</body></html>" >> index.html

      - name: Get tag name or create one
        id: tag_name
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Создаем тег на основе версии пакета
            tag="v${{ needs.build_package.outputs.package_version }}"
            echo "tag=$tag" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_name.outputs.tag }}
          name: "Release ${{ steps.tag_name.outputs.tag }}"
          body: |
            ## Telegram OpenWrt Scripts ${{ steps.tag_name.outputs.tag }}
            
            A comprehensive set of scripts with plugins API for managing OpenWrt routers via Telegram bot.
            
            ### Features
            - 🤖 Full Telegram bot integration
            - 📡 Network interface management  
            - 🔥 Firewall rules control
            - 📊 System monitoring and statistics
            - 📷 IP Camera integration
            - 🌐 Proxy management
            - 📱 WiFi control
            - 🔌 Switch ports monitoring
            - 📋 Process management
            - 📦 Package management via opkg
            
            ### Installation
            ```bash
            # Add repository
            echo 'src/gz telegramopenwrt https://github.com/onlythere/telegramopenwrt/releases/latest/download' >> /etc/opkg/customfeeds.conf
            
            # Update and install
            opkg update
            opkg install telegramopenwrt
            ```
            
            ### Manual Installation
            ```bash
            # Download and install directly
            wget https://github.com/onlythere/telegramopenwrt/releases/latest/download/telegramopenwrt_*.ipk
            opkg install telegramopenwrt_*.ipk
            ```
            
            ### Compatible with:
            - OpenWrt ${{ env.OPENWRT_VERSION }}
            - Architecture: ${{ env.TARGET_ARCH_INPUT }}
            - Device: Xiaomi Mi Router AX3000T
          files: |
            packages/*.ipk
            packages/*.apk
            packages/Packages
            packages/Packages.gz
            packages/index.html
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_repository:
    name: Deploy Package Repository
    needs: [build_package, create_release]
    runs-on: ubuntu-22.04
    if: |
      needs.build_package.result == 'success' && 
      needs.create_release.result == 'success'

    steps:
      - name: Checkout packages branch
        uses: actions/checkout@v4
        with:
          ref: packages
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create packages branch if not exists
        if: failure()
        run: |
          git checkout --orphan packages
          git rm -rf .
          echo "# OpenWrt Packages Repository" > README.md
          git add README.md
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Initialize packages branch"
          git push origin packages

      - name: Download release artifacts
        run: |
          mkdir -p packages/mediatek/filogic packages/x86/64
          
          # Скачиваем файлы из последнего релиза
          latest_release=$(curl -s https://api.github.com/repos/onlythere/telegramopenwrt/releases/latest | jq -r .tag_name)
          
          # Скачиваем пакеты
          wget -P packages/mediatek/filogic/ https://github.com/onlythere/telegramopenwrt/releases/latest/download/Packages || true
          wget -P packages/mediatek/filogic/ https://github.com/onlythere/telegramopenwrt/releases/latest/download/Packages.gz || true
          
          # Скачиваем все .ipk и .apk файлы
          curl -s https://api.github.com/repos/onlythere/telegramopenwrt/releases/latest \
            | jq -r '.assets[] | select(.name | endswith(".ipk") or endswith(".apk")) | .browser_download_url' \
            | while read url; do
                wget -P packages/mediatek/filogic/ "$url" || true
              done

      - name: Update repository index
        run: |
          cd packages
          
          # Создаем общий индекс
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Custom OpenWrt Package Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .code { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
                  .architecture { margin: 20px 0; }
              </style>
          </head>
          <body>
              <h1>Telegram OpenWrt Scripts Repository</h1>
              
              <p>A comprehensive set of scripts with plugins API for managing OpenWrt routers via Telegram bot.</p>
              
              <h2>Quick Installation</h2>
              <div class="code">
                  <pre>echo 'src/gz telegramopenwrt https://github.com/onlythere/telegramopenwrt/releases/latest/download' >> /etc/opkg/customfeeds.conf
          opkg update
          opkg install telegramopenwrt</pre>
              </div>
              
              <h2>Available Architectures</h2>
              <div class="architecture">
                  <h3>MediaTek/Filogic (ARM64)</h3>
                  <p>For routers like: Xiaomi AX3000T, AX6000, etc.</p>
                  <ul>
          EOF
          
          # Добавляем ссылки на пакеты
          find mediatek/filogic/ -name "*.ipk" -o -name "*.apk" | while read file; do
            echo "                  <li><a href=\"$file\">$(basename "$file")</a></li>" >> index.html
          done
          
          cat >> index.html << 'EOF'
                  </ul>
              </div>
              
              <h2>Repository Structure</h2>
              <ul>
                  <li><a href="mediatek/filogic/Packages">Packages Index</a></li>
                  <li><a href="mediatek/filogic/Packages.gz">Packages Index (compressed)</a></li>
              </ul>
          </body>
          </html>
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update packages from release ${{ needs.create_release.result }}" || exit 0
          git push origin packages