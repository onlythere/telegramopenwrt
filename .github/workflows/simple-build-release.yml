name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.editorconfig'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
  workflow_dispatch:
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gh.outputs.version }}
      release: ${{ steps.gh.outputs.release }}
      sha: ${{ steps.gh.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GH
        id: gh
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ Makefile –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          if [ -f "Makefile" ]; then
            echo "version=$(cat Makefile | grep "PKG_VERSION" | head -1 | sed 's/.*:= *//' | sed 's/ *$//')" >> $GITHUB_OUTPUT
            echo "release=$(cat Makefile | grep "PKG_RELEASE" | head -1 | sed 's/.*:= *//' | sed 's/ *$//')" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.0" >> $GITHUB_OUTPUT
            echo "release=1" >> $GITHUB_OUTPUT
          fi

          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
          fi
          echo "sha=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  build-openwrt:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch:
          - openwrt-24.10
        arch:
          - aarch64_cortex-a53  # –î–ª—è –≤–∞—à–µ–≥–æ Xiaomi AX3000T
          - aarch64_cortex-a72
          - aarch64_generic
          - arm_cortex-a7_neon-vfpv4
          - arm_cortex-a9
          - mips_24kc
          - mipsel_24kc
          - x86_64
    container:
      image: openwrt/sdk:${{ matrix.arch }}-${{ matrix.branch }}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Makefile if not exists
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          RELEASE: ${{ needs.prepare.outputs.release }}
          SHA: ${{ needs.prepare.outputs.sha }}
        run: |
          if [ ! -f "Makefile" ]; then
            cat > Makefile << 'EOF'
          include $(TOPDIR)/rules.mk

          PKG_NAME:=telegramopenwrt
          PKG_VERSION:=$VERSION
          PKG_RELEASE:=$RELEASE

          PKG_MAINTAINER:=onlythere
          PKG_LICENSE:=GPL-2.0

          include $(INCLUDE_DIR)/package.mk

          define Package/telegramopenwrt
            SECTION:=utils
            CATEGORY:=Utilities
            TITLE:=Telegram Scripts for OpenWrt
            DEPENDS:=+curl +ca-certificates
            PKGARCH:=all
          endef

          define Package/telegramopenwrt/description
            Telegram Scripts for OpenWrt - Manage and get information on OpenWrt routers via Telegram bot
          endef

          define Build/Compile
          endef

          define Package/telegramopenwrt/install
            $(INSTALL_DIR) $(1)/etc/config
            $(INSTALL_DIR) $(1)/etc/init.d
            $(INSTALL_DIR) $(1)/sbin
            $(INSTALL_DIR) $(1)/usr/lib/telegramopenwrt
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if [ -d "./etc/config" ]; then \
              $(INSTALL_CONF) ./etc/config/* $(1)/etc/config/; \
            fi
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ init —Å–∫—Ä–∏–ø—Ç–æ–≤
            if [ -d "./etc/init.d" ]; then \
              $(INSTALL_BIN) ./etc/init.d/* $(1)/etc/init.d/; \
            fi
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if [ -d "./sbin" ]; then \
              $(INSTALL_BIN) ./sbin/* $(1)/sbin/; \
            fi
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –ø–ª–∞–≥–∏–Ω–æ–≤
            if [ -d "./usr" ]; then \
              $(CP) ./usr/* $(1)/usr/; \
            fi
          endef

          define Package/telegramopenwrt/postinst
          #!/bin/sh
          # –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
          [ -f "/etc/init.d/telegram_bot" ] && /etc/init.d/telegram_bot enable
          [ -f "/etc/init.d/lanports" ] && /etc/init.d/lanports enable
          [ -f "/etc/init.d/hosts_scan" ] && /etc/init.d/hosts_scan enable
          echo "Telegram OpenWrt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ /etc/config/telegramopenwrt"
          endef

          define Package/telegramopenwrt/prerm
          #!/bin/sh
          [ -f "/etc/init.d/telegram_bot" ] && /etc/init.d/telegram_bot stop 2>/dev/null
          [ -f "/etc/init.d/lanports" ] && /etc/init.d/lanports stop 2>/dev/null
          [ -f "/etc/init.d/hosts_scan" ] && /etc/init.d/hosts_scan stop 2>/dev/null
          endef

          $(eval $(call BuildPackage,telegramopenwrt))
          EOF
          
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            sed -i "s/\$VERSION/$VERSION/g" Makefile
            sed -i "s/\$RELEASE/$RELEASE/g" Makefile
          fi

      - name: Initialize SDK
        id: init_sdk
        working-directory: /builder
        run: |
          HOME=/builder ./setup.sh

      - name: Build packages
        id: build
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          RELEASE: ${{ needs.prepare.outputs.release }}
          SHA: ${{ needs.prepare.outputs.sha }}
        working-directory: /builder
        run: |
          echo "src-link telegramopenwrt $GITHUB_WORKSPACE" >> feeds.conf
          cat feeds.conf
          
          ./scripts/feeds update telegramopenwrt
          ./scripts/feeds install -a -p telegramopenwrt
          
          # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
          echo "CONFIG_PACKAGE_telegramopenwrt=m" > .config
          make defconfig
          
          # –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞
          make package/telegramopenwrt/compile V=s
          
          # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç
          PACKAGE_FILE=$(find ./bin -type f -name 'telegramopenwrt*.ipk' | head -1)
          if [ -n "$PACKAGE_FILE" ]; then
            mv "$PACKAGE_FILE" ./telegramopenwrt-$VERSION-$RELEASE-$SHA-${{ matrix.arch }}-${{ matrix.branch }}.ipk
            echo "‚úÖ –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: telegramopenwrt-$VERSION-$RELEASE-$SHA-${{ matrix.arch }}-${{ matrix.branch }}.ipk"
            ls -la ./telegramopenwrt*.ipk
          else
            echo "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            find ./bin -name "*.ipk" -ls
            exit 1
          fi

      - name: Upload packages
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: telegramopenwrt-${{ matrix.branch }}-${{ matrix.arch }}
          path: /builder/telegramopenwrt*.ipk
          if-no-files-found: error

  pre-release:
    if: github.event_name != 'pull_request' && github.ref_name == 'master'
    needs: [build-openwrt]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create package repository
        run: |
          # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          mkdir -p repo/packages
          
          # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .ipk —Ñ–∞–π–ª—ã
          find . -name "telegramopenwrt*.ipk" -exec cp {} repo/packages/ \;
          
          cd repo/packages
          
          # –°–æ–∑–¥–∞–µ–º Packages –∏–Ω–¥–µ–∫—Å
          for ipk in *.ipk; do
            if [ -f "$ipk" ]; then
              echo "Package: telegramopenwrt"
              echo "Version: $(echo $ipk | sed -n 's/telegramopenwrt-\([^-]*-[^-]*\)-.*/\1/p')"
              echo "Architecture: $(echo $ipk | sed -n 's/.*-\([^-]*\)-openwrt.*/\1/p')"
              echo "Depends: curl, ca-certificates"
              echo "Section: utils"
              echo "Filename: $ipk"
              echo "Size: $(stat -c%s "$ipk")"
              echo "SHA256sum: $(sha256sum "$ipk" | cut -d' ' -f1)"
              echo "Description: Telegram Scripts for OpenWrt"
              echo ""
            fi
          done > Packages
          
          # –°–∂–∏–º–∞–µ–º –∏–Ω–¥–µ–∫—Å
          gzip -c Packages > Packages.gz
          
          # –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
          cat > index.html << 'HTML_EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Telegram OpenWrt Packages</title>
              <style>body{font-family:Arial,sans-serif;margin:40px;background:#f5f5f5}.container{max-width:800px;margin:0 auto;background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}.code{background:#2d3748;color:#e2e8f0;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0}h1{color:#2d3748;border-bottom:3px solid #4299e1;padding-bottom:10px}</style>
          </head>
          <body>
              <div class="container">
                  <h1>ü§ñ Telegram OpenWrt Scripts</h1>
                  <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OpenWrt —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞</p>
                  
                  <h2>üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞</h2>
                  <div class="code">echo 'src/gz telegramopenwrt https://github.com/onlythere/telegramopenwrt/releases/download/continuous' >> /etc/opkg/customfeeds.conf<br>
          opkg update<br>
          opkg install telegramopenwrt</div>
                  
                  <h2>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã</h2>
                  <ul>
          HTML_EOF
          
          for ipk in *.ipk; do
            echo "<li><a href=\"$ipk\">$ipk</a></li>" >> index.html
          done
          
          echo '</ul></div></body></html>' >> index.html
          
          cd ../..

      - name: Upload assets
        uses: slord399/action-automatic-releases@v1.0.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: 'continuous'
          prerelease: true
          title: 'Development build'
          files: |
            ./repo/packages/*.ipk
            ./repo/packages/Packages
            ./repo/packages/Packages.gz
            ./repo/packages/index.html