name: CI

on:
  push:
    branches: [master]
    paths-ignore:
      - '.editorconfig'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
  workflow_dispatch:
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gh.outputs.version }}
      release: ${{ steps.gh.outputs.release }}
      sha: ${{ steps.gh.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version and SHA
        id: gh
        run: |
          VERSION=$(grep PKG_VERSION Makefile | sed 's/.*:= *//' | sed 's/ *$//')
          RELEASE=$(grep PKG_RELEASE Makefile | sed 's/.*:= *//' | sed 's/ *$//')
          echo "version=${VERSION:-1.0.0}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE:-1}" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  build-openwrt:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [openwrt-24.10]
        arch:
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_generic
          - arm_cortex-a7_neon-vfpv4
          - arm_cortex-a9
          - mips_24kc
          - mipsel_24kc
          - x86_64
    container:
      image: openwrt/sdk:${{ matrix.arch }}-${{ matrix.branch }}
      options: --user root
    steps:
      - uses: actions/checkout@v4

      - name: Create package directory
        run: |
          mkdir -p telegramopenwrt
          cp Makefile telegramopenwrt/
          cp -r etc sbin usr telegramopenwrt/

      - name: Setup OpenWrt SDK
        working-directory: /builder
        run: |
          HOME=/builder ./setup.sh

      - name: Build package
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          RELEASE: ${{ needs.prepare.outputs.release }}
          SHA: ${{ needs.prepare.outputs.sha }}
          TAR_OPTIONS: --format=gnu
        working-directory: /builder
        run: |
          echo "src-link telegramopenwrt $GITHUB_WORKSPACE" >> feeds.conf
          ./scripts/feeds update telegramopenwrt
          ./scripts/feeds install -p telegramopenwrt telegramopenwrt

          echo "CONFIG_PACKAGE_telegramopenwrt=m" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL_NONSHARED=n" >> .config
          echo "CONFIG_TAR_VERBOSITY='--format=gnu'" >> .config
          make defconfig

          make package/feeds/telegramopenwrt/telegramopenwrt/compile V=s

          PACKAGE_FILE=$(find bin/packages -type f -name "telegramopenwrt_*.ipk" | head -1)
          FINAL_NAME="telegramopenwrt_${VERSION}-${RELEASE}_${{ matrix.arch }}.ipk"

          if [ -f "$PACKAGE_FILE" ]; then
            cp "$PACKAGE_FILE" "./$FINAL_NAME"
            echo "✅ Built: $FINAL_NAME"
          else
            echo "❌ Package not found!"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: telegramopenwrt-${{ matrix.branch }}-${{ matrix.arch }}
          path: telegramopenwrt_*.ipk
          if-no-files-found: error

  pre-release:
    if: github.event_name != 'pull_request' && github.ref_name == 'master'
    needs: [build-openwrt]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate package feed
        run: |
          mkdir -p repo/packages
          find . -name "telegramopenwrt_*.ipk" -exec cp {} repo/packages/ \;
          cd repo/packages

          sudo apt-get update && sudo apt-get install -y opkg-utils
          opkg-make-index -m . > Packages
          gzip -k Packages

          cat > index.html << 'EOF'
<!DOCTYPE html>
<html>
<head><title>Telegram OpenWrt Packages</title></head>
<body>
<h1>Telegram OpenWrt Packages</h1><ul>
EOF
          for ipk in *.ipk; do
            echo "<li><a href=\"$ipk\">$ipk</a></li>" >> index.html
          done
          echo "</ul></body></html>" >> index.html
          cd ../..

      - name: Upload to continuous release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          prerelease: true
          name: Development build
          files: |
            repo/packages/*.ipk
            repo/packages/Packages
            repo/packages/Packages.gz
            repo/packages/index.html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
